// Code generated . DO NOT EDIT.
// ################################## DO NOT EDIT THIS FILE ######################################
// Common Sense Coding (https://github.com/cscoding21/csgen)

// Generate Date: 2024-09-01 16:48:41.794044005 -0700 PDT m=+2.581966146
// Implementation Name: csmap
// Developer Note: The contents of this file will be recreated each time its generator is called

// -----------------------------------------------------------------------------------------------

package tests

import (
	"github.com/cscoding21/csmap/tests/pkg1"
	"github.com/cscoding21/csmap/tests/pkg2"
	"github.com/cscoding21/csmap/utils"
)

// ProjectPkg1ToPkg2 converts the source object to the target object.
func ProjectPkg1ToPkg2(r pkg1.Project) pkg2.Project {
	out := pkg2.Project{
		ID:                &r.ID,
		ProjectBasics:     utils.ValToRef(ProjectBasicsPkg1ToPkg2(utils.RefToVal(r.ProjectBasics))),
		ProjectValue:      utils.ValToRef(ProjectValuePkg1ToPkg2(utils.RefToVal(r.ProjectValue))),
		ProjectCost:       utils.ValToRef(ProjectCostPkg1ToPkg2(utils.RefToVal(r.ProjectCost))),
		ProjectDaci:       utils.ValToRef(ProjectDaciPkg1ToPkg2(utils.RefToVal(r.ProjectDaci))),
		ProjectFeatures:   ProjectFeaturePkg1ToPkg2Slice(r.ProjectFeatures),
		ProjectMilestones: ProjectMilestonePkg1ToPkg2Slice(r.ProjectMilestones),
	}

	return out
}

// ProjectPkg1ToPkg2Slice converts the source object slice to the target object slice.
func ProjectPkg1ToPkg2Slice(r []*pkg1.Project) []*pkg2.Project {
	out := []*pkg2.Project{}

	for _, v := range r {
		out = append(out, utils.ValToRef(ProjectPkg1ToPkg2(*v)))
	}

	return out
}

// ProjectBasicsPkg1ToPkg2 converts the source object to the target object.
func ProjectBasicsPkg1ToPkg2(r pkg1.ProjectBasics) pkg2.ProjectBasics {
	out := pkg2.ProjectBasics{
		Name:        r.Name,
		Description: r.Description,
		StartDate:   r.StartDate,
		OwnerEmail:  &r.OwnerEmail,
	}

	return out
}

// ProjectBasicsPkg1ToPkg2Slice converts the source object slice to the target object slice.
func ProjectBasicsPkg1ToPkg2Slice(r []*pkg1.ProjectBasics) []*pkg2.ProjectBasics {
	out := []*pkg2.ProjectBasics{}

	for _, v := range r {
		out = append(out, utils.ValToRef(ProjectBasicsPkg1ToPkg2(*v)))
	}

	return out
}

// ProjectCostPkg1ToPkg2 converts the source object to the target object.
func ProjectCostPkg1ToPkg2(r pkg1.ProjectCost) pkg2.ProjectCost {
	out := pkg2.ProjectCost{
		Ongoing:      r.Ongoing,
		BlendedRate:  r.BlendedRate,
		InitialCost:  &r.InitialCost,
		HourEstimate: r.HourEstimate,
	}

	return out
}

// ProjectCostPkg1ToPkg2Slice converts the source object slice to the target object slice.
func ProjectCostPkg1ToPkg2Slice(r []*pkg1.ProjectCost) []*pkg2.ProjectCost {
	out := []*pkg2.ProjectCost{}

	for _, v := range r {
		out = append(out, utils.ValToRef(ProjectCostPkg1ToPkg2(*v)))
	}

	return out
}

// ProjectDaciPkg1ToPkg2 converts the source object to the target object.
func ProjectDaciPkg1ToPkg2(r pkg1.ProjectDaci) pkg2.ProjectDaci {
	out := pkg2.ProjectDaci{
		Driver:      r.Driver,
		Approver:    r.Approver,
		Contributor: r.Contributor,
		Informed:    r.Informed,
	}

	return out
}

// ProjectDaciPkg1ToPkg2Slice converts the source object slice to the target object slice.
func ProjectDaciPkg1ToPkg2Slice(r []*pkg1.ProjectDaci) []*pkg2.ProjectDaci {
	out := []*pkg2.ProjectDaci{}

	for _, v := range r {
		out = append(out, utils.ValToRef(ProjectDaciPkg1ToPkg2(*v)))
	}

	return out
}

// ProjectFeaturePkg1ToPkg2 converts the source object to the target object.
func ProjectFeaturePkg1ToPkg2(r pkg1.ProjectFeature) pkg2.ProjectFeature {
	out := pkg2.ProjectFeature{
		ID:          *r.ID,
		Name:        r.Name,
		Description: r.Description,
		Status:      r.Status,
	}

	return out
}

// ProjectFeaturePkg1ToPkg2Slice converts the source object slice to the target object slice.
func ProjectFeaturePkg1ToPkg2Slice(r []*pkg1.ProjectFeature) []*pkg2.ProjectFeature {
	out := []*pkg2.ProjectFeature{}

	for _, v := range r {
		out = append(out, utils.ValToRef(ProjectFeaturePkg1ToPkg2(*v)))
	}

	return out
}

// ProjectMilestonePkg1ToPkg2 converts the source object to the target object.
func ProjectMilestonePkg1ToPkg2(r pkg1.ProjectMilestone) pkg2.ProjectMilestone {
	out := pkg2.ProjectMilestone{
		ID:        *r.ID,
		StartDate: r.StartDate,
		EndDate:   r.EndDate,
		Phase:     utils.ValToRef(ProjectMilestonePhasePkg1ToPkg2(utils.RefToVal(r.Phase))),
		Tasks:     ProjectMilestoneTaskPkg1ToPkg2Slice(r.Tasks),
	}

	return out
}

// ProjectMilestonePkg1ToPkg2Slice converts the source object slice to the target object slice.
func ProjectMilestonePkg1ToPkg2Slice(r []*pkg1.ProjectMilestone) []*pkg2.ProjectMilestone {
	out := []*pkg2.ProjectMilestone{}

	for _, v := range r {
		out = append(out, utils.ValToRef(ProjectMilestonePkg1ToPkg2(*v)))
	}

	return out
}

// ProjectMilestonePhasePkg1ToPkg2 converts the source object to the target object.
func ProjectMilestonePhasePkg1ToPkg2(r pkg1.ProjectMilestonePhase) pkg2.ProjectMilestonePhase {
	out := pkg2.ProjectMilestonePhase{
		ID:          r.ID,
		Order:       int(r.Order),
		Name:        r.Name,
		Description: r.Description,
	}

	return out
}

// ProjectMilestonePhasePkg1ToPkg2Slice converts the source object slice to the target object slice.
func ProjectMilestonePhasePkg1ToPkg2Slice(r []*pkg1.ProjectMilestonePhase) []*pkg2.ProjectMilestonePhase {
	out := []*pkg2.ProjectMilestonePhase{}

	for _, v := range r {
		out = append(out, utils.ValToRef(ProjectMilestonePhasePkg1ToPkg2(*v)))
	}

	return out
}

// ProjectMilestoneTaskPkg1ToPkg2 converts the source object to the target object.
func ProjectMilestoneTaskPkg1ToPkg2(r pkg1.ProjectMilestoneTask) pkg2.ProjectMilestoneTask {
	out := pkg2.ProjectMilestoneTask{
		ID:               *r.ID,
		Name:             r.Name,
		HourEstimate:     r.HourEstimate,
		Description:      &r.Description,
		RequiredSkillIDs: r.RequiredSkillIDs,
		ResourceIDs:      r.ResourceIDs,
		StartDate:        r.StartDate,
		EndDate:          r.EndDate,
	}

	return out
}

// ProjectMilestoneTaskPkg1ToPkg2Slice converts the source object slice to the target object slice.
func ProjectMilestoneTaskPkg1ToPkg2Slice(r []*pkg1.ProjectMilestoneTask) []*pkg2.ProjectMilestoneTask {
	out := []*pkg2.ProjectMilestoneTask{}

	for _, v := range r {
		out = append(out, utils.ValToRef(ProjectMilestoneTaskPkg1ToPkg2(*v)))
	}

	return out
}

// ProjectValuePkg1ToPkg2 converts the source object to the target object.
func ProjectValuePkg1ToPkg2(r pkg1.ProjectValue) pkg2.ProjectValue {
	out := pkg2.ProjectValue{
		FundingSource:        &r.FundingSource,
		DiscountRate:         &r.DiscountRate,
		YearOneValue:         &r.YearOneValue,
		YearTwoValue:         &r.YearTwoValue,
		YearThreeValue:       &r.YearThreeValue,
		YearFourValue:        &r.YearFourValue,
		YearFiveValue:        &r.YearFiveValue,
		NetPresentValue:      &r.NetPresentValue,
		InternalRateOfReturn: &r.InternalRateOfReturn,
	}

	return out
}

// ProjectValuePkg1ToPkg2Slice converts the source object slice to the target object slice.
func ProjectValuePkg1ToPkg2Slice(r []*pkg1.ProjectValue) []*pkg2.ProjectValue {
	out := []*pkg2.ProjectValue{}

	for _, v := range r {
		out = append(out, utils.ValToRef(ProjectValuePkg1ToPkg2(*v)))
	}

	return out
}
